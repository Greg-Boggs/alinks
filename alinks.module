<?php
/**
 * @file
 * this module allows users to associates defined text to links
 */

/**
 * Implementation of hook_permission().
 */
function alinks_permission() {

  return array(
    'administer alinks' => array(
      'title' => t('administer alinks'),
    ),
    'edit alinks' => array(
      'title' => t('edit alinks'),
    ),
  );
}

/**
 * Implementation of hook_node_view().
 */
function alinks_node_view(array &$build, \Drupal\node\NodeInterface $node, $view_mode, $langcode) {
  $node_types = \Drupal::config('alinks.settings')->get('node_types');
  if (!is_array($node_types)) {
    return;
  }

  $node_types = in_array($node->getType(), $node_types, TRUE);
  if ($node_types) {
    $words = alinks_get_strings();
    if ($words) {
      if (is_array($words) && !empty($words) && isset($node->content['body'][0]['#markup'])) {
        $node->content['body'][0]['#markup'] = alinks_make_links($node->content['body'][0]['#markup'], $words);
      }
    }
  }
}

/**
 * Get the strings we have to replace from the database
 */
function alinks_get_strings() {
  $alink = array();
  $result = db_query("SELECT * FROM {alinks} ORDER BY alink_weight");


  if ($result->rowCount() > 0) {
    foreach ($result as $alinks) {
      $alink[$alinks->id] = $alinks;
    }
  }

  return $alink;
}

/**
 * Transform the first instance of any word defined to links
 */
function alinks_make_links($body, $words) {
  if (is_array($words) && isset($body)) {

    // create the replacement array
    $url = (drupal_lookup_path('alias', $_GET['q'])) ? drupal_lookup_path('alias', $_GET['q']) : $_GET['q'];
    $i = 0;
    $title = 'alink_replaced\1alink_replaced';
    $alink_options = array();
    $links_chars = array('/', '-');
    $links_chars_replace = array('alink_slash', 'alink_minus');
    $replacement = array();

    foreach ($words as $word) {
      if ($word->alink_url != $url) {
        $alink_start_boundary = ($word->alink_start_boundary == 1) ? 'B' : 'b';
        $alink_end_boundary = ($word->alink_end_boundary == 1) ? 'B' : 'b';
        $alink_case_insensivity = ($word->alink_case_insensitive == 1) ? 'i' : '';
        $word->alink_text = trim(htmlspecialchars($word->alink_text));

        $alink_text[] = '$\\' . $alink_start_boundary . '(' . preg_quote($word->alink_text, '$') . ')\\' . $alink_end_boundary . '(?!((?!alink_replaced).)*alink_replaced</a>)$u' . $alink_case_insensivity;

        if ($word->alink_external != 1) {
          $alink_path = 'alink_check' . str_replace('/', 'alink_slash', $word->alink_url) . 'alink_check';
        }
        else {
          $alink_path = str_replace($links_chars, $links_chars_replace, $word->alink_url) . 'alink_check';
          $alink_options['absolute'] =  TRUE;
        }
        if (!empty($word->alink_class)) {
          $alink_class = 'alink_check' . str_replace(' ', 'alink_space', $word->alink_class) . 'alink_check';
          $alink_options['attributes']['class'] = $alink_class;
        }
        if (!empty($word->url_title)) {
          $alink_title = 'alink_check' . str_replace(' ', 'alink_space', \Drupal\Component\Utility\SafeMarkup::checkPlain($word->url_title)) . 'alink_check';
          $alink_options['attributes']['title'] = $alink_title;
        }
        $alink_url[] = new Link($title, $alink_path, $alink_options);
        $i++;
      }
    }
    if ($i > 0) {
      $alink_url = str_replace(array('&amp;amp;', '&amp;lt;', '&amp;gt;'), array('&amp;', '&lt;', '&gt;'), $alink_url);

      // we replace new lines with a temporary delimiter
      $carriage  = array("\r\n", "\n", "\r");
      $carriage_replacement = array(" cariage_replacement_rn ", " cariage_replacement_n ", " cariage_replacement_r ");
      $body = str_replace($carriage, $carriage_replacement, $body);

      // we get out the already existing links
      preg_match_all('/\<a\s.*?\>(.*?)\<\/a\>/i', $body, $linka);

      // create the replacement array
      foreach ($linka[0] as $key => $values) {
        $replacement[] = ' alink_delimiter_' . $key . ' ';
      }

      // replace the links with the replacement text
      $body = str_replace($linka[0], $replacement, $body);

      // we get all the text that is not inside a html tag from the modified text
      preg_match_all('/\>(.*?)\</', $body, $output);
      $output[0] = array_unique($output[0]);
      $output[1] = array_unique($output[1]);

      // transform the result array to a string so we can use the limit argument
      $text = implode(' alink_delimiter_one_string ', $output[1]);
      $limit = \Drupal::config('alinks.settings')->get('alinks_limit');

      // make the actual replacement
      if ($limit == -1) {
        $output[1] = preg_replace($alink_text, $alink_url, $text);
      }
      else {
        $output[1] = preg_replace($alink_text, $alink_url, $text, $limit);
      }

      // rebuild the array
      $output[1] = explode(' alink_delimiter_one_string ', $output[1]);
      $our_output = array();
      $i = 0;

      // we make sure the text will pe replaced outside any tag
      foreach ($output[1] as $key => $values) {
        if (!$values) {
          $our_output[$i] = '><';
        }
        else {
          $our_output[$i] = str_replace($values, '>' . $values . '<', $values);
        }
        $i++;
      }

      // insert the new text in the full text
      $body = str_replace($output[0], $our_output, $body);

      // and put back the links in the text
      $body = str_replace($replacement, $linka[0], $body);
      $body = str_replace('alink_check', '', $body);
      $body = str_replace('alink_replaced', '', $body);
      $body = str_replace('alink_space', ' ', $body);
      $body = str_replace($links_chars_replace, $links_chars, $body);

      // and finaly put back the new lines
      $body = str_replace($carriage_replacement, $carriage, $body);
    }
  }

  return $body;
}
