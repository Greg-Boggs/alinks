<?php
// $Id$
/**
 * Implementation of hook_menu().
 */
function alinks_menu($may_cache) {
  $items = array();
  $admin = user_access('administer site configuration');

  if ($may_cache) {
    $items[] = array('path' => 'admin/settings/alinks',
      'title' => t('Alinks'),
      'description' => t('Set the prefferences for Alinks module.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('alinks_admin_settings'),
      'access' => $admin
    );
    $items[] = array('path' => 'admin/build/alinks',
      'title' => t('Alinks'),
      'description' => t('Define the alinks you want.'),
      'callback' => 'alinks_page',
      'callback arguments' => array('alinks_form'),
      'access' => $admin
    );
  }
	
  return $items;
}

/*
 * Generate the form for the settings page
 */
function alinks_admin_settings() {
  $form['alinks_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Alinks Settings'),
    '#collapsible' => FALSE,
  );
  $form['alinks_settings']['alinks_node_types'] = array(
    '#type' => 'fieldset',
    '#title' => t('Alinks node types'),
    '#description' => t('Choose the node types alinks will act upon'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['alinks_settings']['alinks_node_types']['alinks_node_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Alinks node types'),
    '#description' => t('Select node types'),
    '#options' => node_get_types('names'),
    '#default_value' => variable_get('alinks_node_types', array()),
  );
  $form['alinks_settings']['alinks_limit'] = array(
    '#type' => 'textfield',
    '#size' => 5,
    '#maxlenghth' => 3,
    '#title' => t('Alinks limit'),
    '#description' => t('Set the maxium instances an alink can replace. Use -1 if you want all instances to be replaced.'),
    '#default_value' => variable_get('alinks_limit', 1),
  );
  
  return system_settings_form($form);
}
/**
 * Generate the page that will render the forms for adding and editing Alinks
 */
function alinks_page () {
  
  $output = drupal_get_form('alinks_add_form');
  $output .= drupal_get_form('alinks_edit_form');
  return $output;
}
/**
* Implementation of hook_nodeapi().
*/
function alinks_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'view':
      $node_types = in_array($node->type, variable_get('alinks_node_types', array()), TRUE);
      if ($node_types) {
        drupal_add_css(drupal_get_path('module', 'alinks').'/alinks.css');
        $words = alinks_get_strings();
        if ($words) {
      	  $node->content['body']['#value'] = alinks_make_links($node->content['body']['#value'], $words);
	    }
      }
      break;
  }
}

/**
 * Get the strings we have to replace from the database
 */
function alinks_get_strings() {
  $sql = db_query("SELECT * FROM {alinks}");
  if (db_num_rows($sql)>0) {
    $alink = array();
    while ($alinks = db_fetch_array($sql)) {
      $alink[$alinks['id']] = $alinks;
    }
  }
  return $alink;
}

/**
 * Transform the first instance of any word defined to links
 */
function alinks_make_links($body, $words) {

  if (is_array($words)) {
    foreach ($words as $word) {
      $alink_text[] = '/\b'.$word['alink_text'].'\b/';
      $alink_url[] = '<a href="' . check_url($word['alink_url']) . '" class="alinks-link" title="' . check_plain($word['url_title']) . '">' . check_plain($word['alink_text']) . '</a>';	
    }
    preg_match_all('/\>(.*?)\</', $body, $output);
    $output[0] = array_unique($output[0]);
    $output[1] = array_unique($output[1]);
    $text = implode('<!--alink_delimiter-->', $output[1]);
    $limit = variable_get('alinks_limit', 1);
    if ($limit == -1) {
      $output[1] = preg_replace($alink_text, $alink_url, $text);
    }
    else {
      $output[1] = preg_replace($alink_text, $alink_url, $text, $limit);
    }
    $output[1] = explode('<!--alink_delimiter-->', $output[1]);
    $our_output = array();
    $i=0;
    foreach($output[1] as $key => $values) {
      if (!$values) {
        $our_output[$i] = '><';
      }
      else {
        $our_output[$i] = str_replace($values, '>'.$values.'<', $values);
      }
      $i++;
    }
    $text = str_replace($output[0], $our_output, $body);
  }
  return $text;
}

/**
 * Generate the form used to add alinks to drupal
 */
function alinks_add_form() {

  $form['alinks_add_form'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add alink'),
    '#description' => t('Use this form to add alinks'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['alinks_add_form']['word'] = array(
    '#type' => 'textfield',
    '#title' => t('Word'),
    '#size' => 30,
    '#maxlength' => 255,
    '#description' => t('The string you want transformed to a link. The string is case sensitive.'),
    '#required' => TRUE
  );
  $form['alinks_add_form']['url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL'),
    '#size' => 30,
    '#maxlength' => 255,
    '#description' => t('The url the string will link too.'),
    '#required' => TRUE
  );
  $form['alinks_add_form']['url_title'] = array(
    '#type' => 'textfield',
    '#title' => t('URL Title'),
    '#size' => 30,
    '#maxlength' => 255,
    '#description' => t('Title for the url the string will link too. It will be used in the link creation and appear as tooltip when hovering the mouse over the link')
  );
  $form['alinks_add_form']['save'] = array(
    '#type' => 'submit',
    '#value' => t('Add alink'),
  );
  return $form;
	
}

/**
 * Submit the form used to add alinks and insert the data in the db
 */
function alinks_add_form_submit($form_id, $form_values) {

  db_query("INSERT INTO {alinks} (alink_text, alink_url, url_title) VALUES ('%s', '%s', '%s')", $form_values['word'], $form_values['url'], $form_values['url_title']);
}

/**
 * Generate the form used to edit alinks
 */
function alinks_edit_form() {

  $form['alinks_edit_form'] = array(
    '#type' => 'fieldset',
    '#title' => t('Edit alinks'),
    '#description' => t('Use this form to edit alinks. If you want to delete an entry just select the coresponding checkbox. To edit the entry edit the desired text.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $sql = db_query("SELECT * FROM {alinks} ORDER BY alink_text");
    if (db_num_rows($sql) > 0) {
      $form['alinks_edit_form']['edit_alink'] = array('#tree' => TRUE);
      while ($alink = db_fetch_array($sql)) {
        $alinks[$alink['id']] = $alink;
        $form['alinks_edit_form']['edit_alink'][$alink['id']]['word_edit'] = array(
          '#type' => 'textfield',
          '#size' => 10,
          '#maxlength' => 255,
          '#default_value' => $alink['alink_text'],
          '#required' => TRUE
        );
        $form['alinks_edit_form']['edit_alink'][$alink['id']]['url_edit'] = array(
          '#type' => 'textfield',
          '#size' => 30,
          '#maxlength' => 255,
          '#default_value' => $alink['alink_url'],
          '#required' => TRUE
        );
        $form['alinks_edit_form']['edit_alink'][$alink['id']]['url_title_edit'] = array(
          '#type' => 'textfield',
          '#size' => 30,
          '#maxlength' => 255,
          '#default_value' => $alink['url_title'],
          '#required' => TRUE
        );
        $form['alinks_edit_form']['edit_alink'][$alink['id']]['delete'] = array(
          '#type' => 'checkbox',
        );
      }

      $form['alinks_edit_form']['save_edit'] = array(
        '#type' => 'submit',
        '#value' => t('Update alinks'),
      );
      $form['alinks_edit_form']['alinks'] = array(
        '#type' => 'value',
        '#value' => $alinks
      );
      $form['alinks_edit_form']['#theme'] = 'alinks_list';
    }
  return $form;

}

/**
 * Theme function for the list of alinks
 */
function theme_alinks_list($form) {

  $header = array(t('String'), t('URL'), t('URL title'), t('Delete'));

  $rows = array();
  foreach($form['alinks']['#value'] as $id=>$alink) {
    $row = array();
    $row[] = array('data' => drupal_render($form['edit_alink'][$alink['id']]['word_edit']), 'align' => 'left');
    $row[] = array('data' => drupal_render($form['edit_alink'][$alink['id']]['url_edit']), 'align' => 'left');
    $row[] = array('data' => drupal_render($form['edit_alink'][$alink['id']]['url_title_edit']), 'align' => 'left');
    $row[] = array('data' => drupal_render($form['edit_alink'][$alink['id']]['delete']), 'align' => 'center');
    $rows[] = $row;
  }
  $output = theme('table', $header, $rows);
  $output .= drupal_render($form);

  return $output;
}

/**
 * Process the edit alinks form
 */
function alinks_edit_form_submit($form_id, $form_values) {

  foreach ($form_values['edit_alink'] as $id => $alink) {
    if ($alink['delete']) {
      db_query("DELETE FROM {alinks} WHERE id = %d", $id);
    }
    else {
      db_query("UPDATE {alinks} SET alink_text = '%s', alink_url = '%s', url_title = '%s' WHERE id = %d", $alink['word_edit'], $alink['url_edit'], $alink['url_title_edit'], $id);
    }
  }
}